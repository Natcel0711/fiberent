// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fiberent/ent/usuario"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Usuario is the model entity for the Usuario schema.
type Usuario struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Usuario) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usuario.FieldID:
			values[i] = new(sql.NullInt64)
		case usuario.FieldUsername, usuario.FieldEmail, usuario.FieldPassword:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Usuario", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Usuario fields.
func (u *Usuario) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usuario.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case usuario.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case usuario.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case usuario.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Usuario.
// Note that you need to call Usuario.Unwrap() before calling this method if this Usuario
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Usuario) Update() *UsuarioUpdateOne {
	return (&UsuarioClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the Usuario entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Usuario) Unwrap() *Usuario {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Usuario is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Usuario) String() string {
	var builder strings.Builder
	builder.WriteString("Usuario(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Usuarios is a parsable slice of Usuario.
type Usuarios []*Usuario

func (u Usuarios) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
